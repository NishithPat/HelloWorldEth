{"version":3,"sources":["getWeb3.js","App.js","serviceWorker.js","index.js"],"names":["getWeb3","Promise","resolve","reject","window","addEventListener","a","ethereum","web3","Web3","enable","console","log","provider","providers","HttpProvider","App","useState","setWeb3","accounts","setAccounts","contract","setContract","undefined","word","setWord","wordExists","setWordExists","contractEth","setContractEth","inputValue","setInputValue","depositValue","setDepositValue","withdrawValue","setWithdrawValue","loading","setLoading","useEffect","web3Instance","eth","getAccounts","accountsInstance","net","getId","networkId","deployedNetwork","Hello","networks","abi","address","instance","Contract","loadDapp","getStoredWord","methods","getter","call","returnedWord","getContractEth","contractBalance","contractEthreturned","utils","fromWei","handleChange","e","target","id","value","changeStoredWord","preventDefault","setter","send","from","deposit","toWei","withdraw","className","_address","onClick","onSubmit","htmlFor","type","onChange","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.c7d3cb70.chunk.js","sourcesContent":["import Web3 from \"web3\";\n\nconst getWeb3 = () =>\n  new Promise((resolve, reject) => {\n    // Wait for loading completion to avoid race conditions with web3 injection timing.\n    window.addEventListener(\"load\", async () => {\n      // Modern dapp browsers...\n      if (window.ethereum) {\n        const web3 = new Web3(window.ethereum);\n        try {\n          // Request account access if needed\n          await window.ethereum.enable();\n          // Accounts now exposed\n          resolve(web3);\n        } catch (error) {\n          reject(error);\n        }\n      }\n      // Legacy dapp browsers...\n      else if (window.web3) {\n        // Use Mist/MetaMask's provider.\n        const web3 = window.web3;\n        console.log(\"Injected web3 detected.\");\n        resolve(web3);\n      }\n      // Fallback to localhost; use dev console port by default...\n      else {\n        const provider = new Web3.providers.HttpProvider(\n          \"http://127.0.0.1:8545\"\n        );\n        const web3 = new Web3(provider);\n        console.log(\"No web3 instance injected, using Local web3.\");\n        resolve(web3);\n      }\n    });\n  });\n\nexport default getWeb3;\n","import React, { useEffect, useState } from \"react\";\nimport Hello from \"./contracts/Hello.json\";\nimport getWeb3 from \"./getWeb3\";\n\nimport \"./App.css\";\n\nconst defaultFormData = {\n  wordSetter: \"\",\n  depositSetter: \"\"\n};\n\nfunction App() {\n  const [web3, setWeb3] = useState(null);\n  const [accounts, setAccounts] = useState([]);\n  const [contract, setContract] = useState([]);\n\n  const [word, setWord] = useState(undefined);\n  const [wordExists, setWordExists] = useState(false);\n  const [contractEth, setContractEth] = useState(undefined);\n\n  const [inputValue, setInputValue] = useState(\"\");\n  const [depositValue, setDepositValue] = useState(\"\");\n  const [withdrawValue, setWithdrawValue] = useState(\"\");\n  const [loading, setLoading] = useState(false);\n\n  useEffect(() => {\n    const loadDapp = async () => {\n      try {\n        const web3Instance = await getWeb3();\n        const accountsInstance = await web3Instance.eth.getAccounts();\n\n        const networkId = await web3Instance.eth.net.getId();\n        const deployedNetwork = Hello.networks[networkId];\n\n        console.log(Hello.abi);\n        console.log(deployedNetwork.address);\n\n        const instance = new web3Instance.eth.Contract(\n          Hello.abi,\n          deployedNetwork && deployedNetwork.address,\n        );\n        console.log(accountsInstance);\n\n        setWeb3(web3Instance);\n        setAccounts(accountsInstance);\n        setContract(instance);\n\n      } catch (error) {\n        console.log(error);\n      }\n    }\n\n    loadDapp();\n  }, [])\n\n  const getStoredWord = async () => {\n    try {\n      console.log(contract.methods)\n      const returnedWord = await contract.methods.getter().call();\n      console.log(returnedWord);\n      setWord(returnedWord);\n      setWordExists(true);\n    } catch (e) {\n      console.log(e);\n      setWord(undefined);\n      setWordExists(false);\n    }\n  }\n\n  const getContractEth = async () => {\n    const contractEthreturned = await contract.methods.contractBalance().call();\n    setContractEth(web3.utils.fromWei(contractEthreturned, 'ether'));\n  }\n\n  const handleChange = (e) => {\n    console.log(e.target.id);\n    if (e.target.id == \"wordSetter\") {\n      setInputValue(e.target.value);\n    } else if (e.target.id == \"depositSetter\") {\n      setDepositValue(e.target.value);\n    } else if (e.target.id == \"withdrawSetter\") {\n      setWithdrawValue(e.target.value);\n    }\n  }\n\n  const changeStoredWord = async (e) => {\n    e.preventDefault();\n    try {\n      setLoading(true);\n      await contract.methods.setter(inputValue).send({ from: accounts[0] });\n      setLoading(false);\n    } catch (error) {\n      console.log(error);\n      setLoading(false);\n    }\n    setInputValue(\"\");\n  }\n\n  const deposit = async (e) => {\n    e.preventDefault();\n    try {\n      setLoading(true);\n      await contract.methods.deposit().send({ from: accounts[0], value: web3.utils.toWei(depositValue, 'ether') });\n      setLoading(false);\n    } catch (error) {\n      console.log(error);\n      setLoading(false);\n    }\n    setDepositValue(\"\");\n  }\n\n  const withdraw = async (e) => {\n    e.preventDefault();\n    try {\n      setLoading(true);\n      await contract.methods.withdraw(web3.utils.toWei(withdrawValue, 'ether')).send({ from: accounts[0] });\n      setLoading(false);\n    } catch (error) {\n      console.log(error);\n      setLoading(false);\n    }\n    setWithdrawValue(\"\");\n  }\n\n  if (!web3) {\n    return <div>Loading Web3, accounts, and contract...</div>;\n  }\n\n  return (\n    <>\n      <div className=\"App\">\n        <b>{loading && \"...loading\"}</b>\n\n        <p>Account0 Address: {accounts[0]}</p>\n        {/*<p>Account1 Address: {accounts[1]}</p>*/}\n        <p>Contract Address: {contract._address}</p>\n        <br />\n        <button onClick={getStoredWord}>Get word stored on contract</button>\n        <p>{wordExists && word}</p>\n\n        <br />\n\n        <form onSubmit={changeStoredWord}>\n          <label htmlFor=\"wordSetter\">Change word stored on contract: </label>\n          <input type=\"text\" id=\"wordSetter\" value={inputValue} onChange={handleChange} />\n          <button type=\"submit\">Change</button>\n        </form>\n\n        <br />\n\n        <button onClick={getContractEth}>Ether stored in contract</button>\n        <p>{contractEth}</p>\n\n        <br />\n\n        <form onSubmit={deposit}>\n          <label htmlFor=\"depositSetter\">Value to be deposited(in ether)</label>\n          <input type=\"number\" id=\"depositSetter\" value={depositValue} onChange={handleChange} />\n          <button type=\"submit\">Deposit</button>\n        </form>\n\n        <form onSubmit={withdraw}>\n          <label htmlFor=\"withdrawSetter\">Value to be withdrawn(in ether)</label>\n          <input type=\"number\" id=\"withdrawSetter\" value={withdrawValue} onChange={handleChange} />\n          <button type=\"submit\">Withdraw</button>\n        </form>\n\n      </div>\n    </>\n  )\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}